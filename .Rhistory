if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE)[[1]]['compiledRelease.contracts'][[1]])
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
length(result)
stream_in_db <- function(con, query, page_size = 1, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE)[[1]]['compiledRelease.contracts'])
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
length(result)
stream_in_db <- function(con, query, page_size = 1, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE)[[1]])
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
length(result)
stream_in_db <- function(con, query, page_size = 1, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE))
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
length(result)
stream_in_db <- function(con, query, page_size = 2, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE)[[1]]$compiledRelease$contracts)
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
stream_in_db <- function(con, query, page_size = 2, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE))
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
stream_in_db <- function(con, query, page_size = 5, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
print(fromJSON(data[['data']], flatten = TRUE))
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
histogram_builder <- function(data, acc) {
m <- parLapply(cl, data, function(e) {
t <- fromJSON(e, flatten = TRUE)['releases']
if (is.na(t)) {
return(0)
} else {
return(t['compiledRelease.contracts'][[1]]['value.amount'])
}
})
return(acc + Reduce("+", m))
}
result <- stream_in_mexico(histogram_builder)
rm(contracts_paraguay)
library(RPostgreSQL)
db_engine <- "PostgreSQL"
host <- "localhost"
user <- "postgres" # if you are concerned about security
password <- "" # you should probably change this 2 lines
port <- 5433
query <- "SELECT id, data FROM data"
drv <- dbDriver(db_engine)
con_colombia <- dbConnect(drv, host = host, port = port,
dbname = "ocds_colombia", user = user, password = password)
con_mexico <- dbConnect(drv, host = host, port = port,
dbname = "ocds_mexico", user = user, password = password)
unlink('manual_cache', recursive = TRUE)
unlink('manual_cache', recursive = TRUE)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
message = FALSE, cache.lazy = FALSE)
knitr::include_graphics("procurement-stages.png")
R.version
a_scalar <- 4
a_number_vector <- c(1, 2, 3, 4, 5) # all elements of a vector must be of the same type
a_string_vector <- c("a1", "b2", "c3", "d4")
a_boolean_vector <- c(TRUE, FALSE)
# lists can have elements of different types, associated to a key
a_list <- list(name = "John", last_name = "Deer", age = 42, married = FALSE)
# there are several ways to access an element from a collection<U+00DF>
a_number_vector[0]
a_string_vector[[1]]
a_list$name
# a matrix is a special kind of vector, with the number of rows and columns as attributes
m <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
m
name <- c("Mike", "Lucy", "John")
age <- c(20, 25, 30)
student <- c(TRUE, FALSE, TRUE)
df <- data.frame(name, age, student)
df
df[1, ] # R has 1-based indexing, i.e. collections start at 1.
df[1, ]$name # Values from a row can be accessed by column name
df$name # Columns can also be accessed directly from the data frame.
library(tidyverse) # Side note: this is how you import a library in R
tb <- as_tibble(df)
class(as.data.frame(tb))
summary(tb)
iris <- as_tibble(read.table("iris.csv", header = TRUE, sep = ","))
iris
# For now, there is no need to understand what each function of this snippet actually does
iris %>%
group_by(Name) %>%
summarize_if(is.numeric, mean) %>%
ungroup()
library(XML)
xml_url <- "http://www.comprasestatales.gub.uy/ocds/rss"
xml_file <- xmlParse(xml_url)
xml_top <- xmlRoot(xml_file)[[1]]
index_tb <- as_tibble(xmlToDataFrame(xmlElementsByTagName(xml_top, "item")))
index_tb
library(jsonlite)
# we run fromJSON (which fetches the url) for every row of the data frame
releases <- apply(index_tb["link"], 1, function(r) {
return(as_tibble(fromJSON(r, flatten = TRUE)[["releases"]]))
})
releases[[1]]
releases_tb <- bind_rows(releases)
library(glue)
library(jsonlite)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(cl, c("fromJSON", "paste", "as_tibble"))
files <- list.files("data/records_dncp/", "*.json")
# fromJSON(paste('data/records_dncp/', [1], sep = ""), flatten = TRUE)
records <- parLapply(cl, files, function(r) {
file <- paste("data/records_dncp/", r, sep = "")
return(as_tibble(fromJSON(file, flatten = TRUE)[["records"]]))
})
records[[1]]
dncp_records_tb <- bind_rows(records)
remove(records)
dncp_records_tb
files <- list.files("data/releases_mh/", "*.json")
# fromJSON(paste('data/records_dncp/', files[1], sep = ""), flatten = TRUE)
records <- parLapply(cl, files, function(r) {
file <- paste("data/releases_mh/", r, sep = "")
return(as_tibble(fromJSON(file, flatten = TRUE)[["releases"]]))
})
mh_releases_tb <- bind_rows(records)
remove(records)
mh_releases_tb
library(RPostgreSQL)
db_engine <- "PostgreSQL"
host <- "localhost"
user <- "postgres" # if you are concerned about security
password <- "" # you should probably change this 2 lines
port <- 5433
query <- "SELECT id, data FROM data"
drv <- dbDriver(db_engine)
con_colombia <- dbConnect(drv, host = host, port = port,
dbname = "ocds_colombia", user = user, password = password)
con_mexico <- dbConnect(drv, host = host, port = port,
dbname = "ocds_mexico", user = user, password = password)
stream_in_db <- function(con, query, page_size = 5, acc = 0) {
current_id <- 0
return(function(handler) {
repeat{
paged_query <- paste(query, "WHERE id > ", current_id, "ORDER BY id ASC LIMIT", page_size)
data <- dbGetQuery(con, paged_query)
if (dim(data)[1] == 0) {
break
}
acc <- handler(data[['data']], acc)
current_id <- tail(data[['id']], n=1)
# print(current_id)
break
}
})
return(acc)
}
stream_in_colombia <- stream_in_db(con_colombia, query)
stream_in_mexico <- stream_in_db(con_mexico, query)
world_population = tibble(
country = c("Paraguay", "Uruguay", "Colombia", "Mexico"),
"2017" = c(7000000, 3000000, 45000000, 127000000),
"2018" = c(7200000, 3200000, 46000000, 128000000),
)
world_population
world_population %>% gather(`2017`, `2018`, key = "year", value = "inhabitants")
world_count = tibble(
country = c("Paraguay", "Uruguay", "Colombia", "Mexico", "Paraguay", "Uruguay", "Colombia", "Mexico"),
year = 2018,
type = c("inhabitants", "inhabitants", "inhabitants", "inhabitants", "cars", "cars", "cars", "cars"),
count = c(7000000, 3000000, 45000000, 127000000, 1000000, 500000, 10000000, 75000000)
)
world_count
world_count %>% spread(key = type, value = count)
index_tb
index_tb %>%
separate(title, into = c("id_compra", "release_id"), sep = ",") %>%
transform(id_compra=str_replace(id_compra,"id_compra:","")) %>%
transform(release_id=str_replace(release_id,"release_id:",""))   %>%
# the last 2 lines just remove the needless prefixes
head(5)
releases_tb
library(lubridate) # if you ever have to work with dates, do yourself a favor and use this
uruguay_releases_with_month = releases_tb %>% mutate(month = month.name[month(date)])
## month.name is a vector with the name of each month
uruguay_releases_with_month[c('ocid', 'month')]
select(uruguay_releases_with_month, ocid, month)
releases_tb[1,]$tag
awards_tb = releases_tb %>% filter(tag == 'award')
awards_tb
awards_tb[10, ]$tag
iris %>%
group_by(Name) %>%
summarize_if(is.numeric, mean)
knitr::include_graphics("visual_cues.jpg")
knitr::include_graphics("ordered_visual_cues.jpg")
ggplot(data = iris) + geom_point(mapping = aes(x = PetalLength, y = PetalWidth, color = Name))
contract_indices <- parApply(cl, dncp_records_tb, 1, function(r) {
contracts <- r['compiledRelease.contracts'][[1]]
return(!is.null(contracts) && !is.null(dim(contracts)))
})
contracts <- parApply(cl, dncp_records_tb[contract_indices, ], 1, function(r) {
result <- r['compiledRelease.contracts'][[1]]
result['buyer.name'] <- r['compiledRelease.buyer.name']
return(result)
})
contracts_dncp <- bind_rows(contracts)
rm(contracts)
contracts <- parApply(cl, mh_releases_tb, 1, function(r) {
result <- r['contracts'][[1]]
result['buyer.name'] <- r['buyer.name']
result['procurement.method'] <- r['tender.procurementMethodDetails']
return(result)
})
contracts_hacienda <- bind_rows(contracts)
rm(contracts)
subset(contracts_dncp['dncpContractCode'], (dncpContractCode %in% contracts_hacienda['dncpContractCode']))
subset(contracts_hacienda['dncpContractCode'], (dncpContractCode %in% contracts_dncp['dncpContractCode']))
contracts_paraguay <- bind_rows(contracts_dncp, contracts_hacienda)
head(contracts_paraguay)
contracts_dncp %>%
group_by(value.currency) %>%
summarise(count = n())
by_year <- contracts_dncp %>%
mutate(signed_year = year(dateSigned)) %>%
filter(!is.na(signed_year), !is.na(value.amount), signed_year < 2019, signed_year > 2009, value.currency == 'PYG') %>%
group_by(signed_year) %>%
summarise(count = n(), amount = sum(value.amount))
ggplot(data=by_year, aes(x=signed_year, y=count)) +
geom_line(color="blue") +
geom_point() +
labs(x = 'Year', y = 'Number of contracts')
ggplot(data=by_year, aes(x=signed_year, y=amount)) +
geom_line(color='springgreen4') +
geom_point() +
labs(x = 'Year', y = 'Total Amount (PYG)')
count_by_buyer <- contracts_dncp %>%
mutate(signed_year = year(dateSigned)) %>%
filter(value.currency == 'PYG', signed_year == 2017) %>%
group_by(buyer.name) %>%
summarise(ccount = n()) %>%
arrange(desc(ccount)) %>%
head(5)
count_by_buyer$buyer.name <- factor(count_by_buyer$buyer.name, levels = count_by_buyer$buyer.name[order(count_by_buyer$ccount)])
ggplot(data=count_by_buyer, aes(x=buyer.name, y=ccount)) +
geom_bar(stat="identity", fill="steelblue") +
coord_flip() +
labs(y = 'Number of contracts', x = 'Buyer')
amount_by_buyer <- contracts_dncp %>%
mutate(signed_year = year(dateSigned)) %>%
filter(value.currency == 'PYG', signed_year == 2017) %>%
group_by(buyer.name) %>%
summarise(amount = sum(value.amount)) %>%
arrange(desc(amount)) %>%
head(5)
top_buyers = amount_by_buyer$buyer.name
amount_by_buyer$buyer.name <- factor(amount_by_buyer$buyer.name, levels = amount_by_buyer$buyer.name[order(amount_by_buyer$amount)])
ggplot(data=amount_by_buyer, aes(x=buyer.name, y=amount)) +
geom_bar(stat="identity", fill="springgreen4") +
coord_flip() +
labs(y = 'Total Amount (PYG)', x = 'Buyer')
contracts_top5_buyers <- contracts_dncp %>%
mutate(signed_year = year(dateSigned)) %>%
filter(value.currency == 'PYG', signed_year == 2017, buyer.name %in% top_buyers) %>%
arrange(desc(value.amount)) %>%
tail(2000)
contracts_top5_buyers$buyer.name <- factor(contracts_top5_buyers$buyer.name)
ggplot(data=contracts_top5_buyers, aes(x=buyer.name, y=value.amount, color=buyer.name)) +
geom_boxplot(outlier.colour="black", outlier.shape=NA,notch=FALSE) +
labs(y = 'Total Amount (PYG)', x = 'Buyer') +
theme(axis.text.y=element_blank()) +
coord_flip()
selected_contracts <- contracts_dncp %>%
mutate(signed_year = year(dateSigned)) %>%
filter(value.currency == 'PYG', signed_year == 2017, !is.na(value.amount)) %>%
arrange(desc(value.amount)) %>%
tail(15000)
ggplot(data=selected_contracts, aes(value.amount)) +
geom_histogram(fill='steelblue', col='black') +
labs(y = 'Amount (PYG)', x = 'Number of Contracts')
stopCluster(cl)
library(glue)
library(jsonlite)
library(parallel)
# Calculate the number of cores
no_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(no_cores)
clusterExport(cl, c("fromJSON", "paste", "as_tibble"))
mh_releases_tb
mh_releases_tb %>%
group_by(ocid) %>%
summarise(c = n()) %>%
arrange(desc(c))
mh_releases_tb[['ocid']]
#mh_releases_tb[['ocid']]
dncp_records_tb[['ocid']]
#mh_releases_tb[['ocid']]
dncp_records_tb['ocid']
#mh_releases_tb[['ocid']]
subset(mh_releases_tb['ocid'], (ocid %in% dncp_records_tb['ocid']))
mh_releases_tb[['ocid']]
#subset(mh_releases_tb['ocid'], (ocid %in% dncp_records_tb['ocid']))
dncp_records_tb[['ocid']]
#subset(mh_releases_tb['ocid'], (ocid %in% dncp_records_tb['ocid']))
mh_releases_tb[['ocid']]
#subset(mh_releases_tb['ocid'], (ocid %in% dncp_records_tb['ocid']))
unlink('manual_cache', recursive = TRUE)
unlink('manual_cache', recursive = TRUE)
unlink('manual_cache', recursive = TRUE)
unlink('manual_cache', recursive = TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
knitr::include_graphics("boxplot.gif")
knitr::include_graphics("boxplot.jpg")
unlink('manual-es_cache', recursive = TRUE)
